import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
from dotenv import load_dotenv

load_dotenv()
bot = Bot(os.getenv("API_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_schedules = {}


# FINITE STATE MACHINE (FSM) –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
class ScheduleState(StatesGroup):
    waiting_for_time = State()


async def generate_finance_question():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è DeepSeek API"""
    api_key = os.getenv("DEEPSEEK_API_KEY")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. "
        "–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: "
        "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –±—é–¥–∂–µ—Ç—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–µ–¥–∏—Ç—ã, —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. "
        "–§–æ—Ä–º–∞—Ç: —á–µ—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–±—É–∂–¥–∞–µ—Ç –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º."
    )

    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 500
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "https://api.deepseek.com/v1/chat/completions",
                    headers=headers,
                    json=data,
                    timeout=10
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        print(f"API Error: {str(e)}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–º!\n"
        "–î–∞–≤–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):"
    )
    await state.set_state(ScheduleState.waiting_for_time)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(ScheduleState.waiting_for_time)
async def process_time(message: types.Message, state: FSMContext):
    try:
        time_str = message.text
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        user_schedules[message.from_user.id] = time_obj
        await message.answer(f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è
async def send_quiz(user_id: int):
    question = await generate_finance_question()
    await bot.send_message(user_id, f"üìö –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{question}")


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
async def scheduler():
    while True:
        now = datetime.now().time()
        for user_id, scheduled_time in user_schedules.items():
            if now.hour == scheduled_time.hour and now.minute == scheduled_time.minute:
                asyncio.create_task(send_quiz(user_id))
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())